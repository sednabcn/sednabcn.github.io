name: Daily Sitemap Monitor

on:
  schedule:
    - cron: "0 6 * * *"  # Daily at 6 AM UTC
  workflow_dispatch:      # Manual trigger

jobs:
  sitemap-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Google Search Console Sitemap Check
        id: gsc
        shell: python
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: |
          import os, sys, json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build

          
          SITE_URL = "https://sednabcn.github.io/"   # change if needed
          SITEMAP_URL = "https://sednabcn.github.io/sitemap.xml"

          CREDS_JSON = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")
          if not CREDS_JSON:
              print("::error::Missing GOOGLE_SERVICE_ACCOUNT_JSON secret")
              sys.exit(1)

          creds = service_account.Credentials.from_service_account_info(
              json.loads(CREDS_JSON),
              scopes=["https://www.googleapis.com/auth/webmasters"]
          )

          service = build("searchconsole", "v1", credentials=creds)

          try:
              # Submit sitemap
              service.sitemaps().submit(siteUrl=SITE_URL, feedpath=SITEMAP_URL).execute()

              # Get sitemap status
              sitemap_info = service.sitemaps().get(siteUrl=SITE_URL, feedpath=SITEMAP_URL).execute()

              # Build report
              report = [
                  "## 📊 Google Sitemap Status",
                  f"- Last Submitted: {sitemap_info.get('lastSubmitted', 'N/A')}",
                  f"- Last Checked: {sitemap_info.get('lastDownloaded', 'N/A')}",
                  f"- Status: {'⏳ Pending' if sitemap_info.get('isPending') else '✅ Processed'}",
                  f"- Warnings: {sitemap_info.get('warnings', 0)}",
                  f"- Errors: {sitemap_info.get('errors', 0)}"
              ]

              print("\n".join(report))
              with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
                  f.write("\n".join(report))

              # Set status output
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  if sitemap_info.get("errors", 0) > 0:
                      f.write("status=unhealthy\n")
                  else:
                      f.write("status=healthy\n")

          except Exception as e:
              print(f"::error::Error checking sitemap: {e}")
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write("status=unhealthy\n")
              sys.exit(1)

      - name: Manage GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = "🚨 Sitemap Errors Detected";

            // Find open sitemap issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['bug','sitemap','error']
            });

            const existingIssue = issues.data.find(i => i.title === issueTitle);

            if ("${{ steps.gsc.outputs.status }}" === "unhealthy") {
              // Create new issue if none exists
              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: await github.actions.getStepSummary(),
                  labels: ['bug','sitemap','error']
                });
                console.log("Created new sitemap error issue");
              } else {
                // Update existing issue with latest summary
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: await github.actions.getStepSummary()
                });
                console.log(`Updated existing issue #${existingIssue.number}`);
              }
            } else {
              // Healthy -> close any existing issue
              if (existingIssue) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: "✅ Sitemap is now healthy. Closing this issue automatically."
                });
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  state: "closed"
                });
                console.log(`Closed resolved issue #${existingIssue.number}`);
              }
            }

      - name: Fail workflow if unhealthy
        if: steps.gsc.outputs.status == 'unhealthy'
        run: exit 1
