name: Enhanced Sitemap Monitor with Email Reporting

on:
  schedule:
    - cron: '0 12 * * 1' # Weekly on Mondays at 12:00 UTC
    - cron: '0 6 * * *'  # Daily health check at 6:00 UTC
  workflow_dispatch:
    inputs:
      force_resubmit:
        description: 'Force resubmit all sitemaps'
        required: false
        default: 'false'
        type: boolean
      detailed_report:
        description: 'Generate detailed status report'
        required: false
        default: 'true'
        type: boolean
      email_recipients:
        description: 'Email recipients (comma-separated)'
        required: false
        default: ''
        type: string
      send_email_on_success:
        description: 'Send email even when all sitemaps are healthy'
        required: false
        default: 'false'
        type: boolean

env:
  SITE_URL: "https://sednabcn.github.io/"
  SITEMAP_URLS: "https://sednabcn.github.io/sitemap.xml"

jobs:
  sitemap-monitor-email:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-oauthlib google-auth-httplib2
          pip install requests beautifulsoup4 lxml tabulate colorama
          pip install python-dateutil pytz markdown2 jinja2

      - name: Setup service account credentials
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > service-account.json
          chmod 600 service-account.json

      - name: Validate environment and email configuration
        id: validate_env
        run: |
          echo "=== Environment Validation ==="
          python --version
          
          # Validate service account
          if [ -f "service-account.json" ]; then
            if python -c "import json; json.load(open('service-account.json'))" 2>/dev/null; then
              echo "✅ Service account JSON is valid"
              python -c "
          import json
          with open('service-account.json') as f:
              data = json.load(f)
              required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id']
              missing = [field for field in required_fields if field not in data]
              if missing:
                  print(f'❌ Missing required fields: {missing}')
                  exit(1)
              else:
                  print('✅ All required service account fields present')
          "
            else
              echo "❌ Service account JSON is invalid"
              exit 1
            fi
          else
            echo "❌ Service account file missing"
            exit 1
          fi
          
          # Validate email configuration
          echo "=== Email Configuration Validation ==="
          EMAIL_CONFIG_VALID=true
          
          if [ -z "${{ secrets.SMTP_USERNAME }}" ]; then
            echo "❌ SMTP_USERNAME secret not set"
            EMAIL_CONFIG_VALID=false
          fi
          
          if [ -z "${{ secrets.SMTP_PASSWORD }}" ]; then
            echo "❌ SMTP_PASSWORD secret not set"
            EMAIL_CONFIG_VALID=false
          fi
          
          if [ -z "${{ secrets.SMTP_FROM_EMAIL }}" ]; then
            echo "❌ SMTP_FROM_EMAIL secret not set"
            EMAIL_CONFIG_VALID=false
          fi
          
          # Determine email recipients
          RECIPIENTS="${{ inputs.email_recipients }}"
          if [ -z "$RECIPIENTS" ]; then
            RECIPIENTS="${{ secrets.DEFAULT_EMAIL_RECIPIENTS }}"
          fi
          
          if [ -z "$RECIPIENTS" ]; then
            echo "⚠️ No email recipients configured"
            EMAIL_CONFIG_VALID=false
          else
            echo "✅ Email recipients: $RECIPIENTS"
          fi
          
          echo "email_config_valid=$EMAIL_CONFIG_VALID" >> $GITHUB_OUTPUT
          echo "email_recipients=$RECIPIENTS" >> $GITHUB_OUTPUT
          
          if [ "$EMAIL_CONFIG_VALID" = "true" ]; then
            echo "✅ Email configuration is valid"
          else
            echo "⚠️ Email configuration incomplete - reports will be generated but not emailed"
          fi

      - name: Create enhanced sitemap monitoring script
        run: |
          cat > enhanced_sitemap_monitor.py << 'EOF'
          #!/usr/bin/env python3
          """
          Enhanced Sitemap Monitor with Status Reporting and Auto-Fix
          Monitors Google Search Console sitemap status and handles issues automatically
          """
          
          import os
          import sys
          import json
          import time
          import argparse
          from datetime import datetime, timezone, timedelta
          from typing import Dict, List, Optional, Tuple
          import requests
          from urllib.parse import urljoin, urlparse
          from pathlib import Path
          
          try:
              from google.oauth2 import service_account
              from googleapiclient.discovery import build
              from googleapiclient.errors import HttpError
              import xml.etree.ElementTree as ET
              from bs4 import BeautifulSoup
              import pytz
          except ImportError as e:
              print(f"Missing required dependency: {e}")
              sys.exit(1)
          
          class SitemapMonitor:
              def __init__(self, service_account_path: str):
                  self.service_account_path = service_account_path
                  self.service = None
                  self.site_url = None
                  self.results = {
                      'timestamp': datetime.now(timezone.utc).isoformat(),
                      'site_url': None,
                      'sitemaps': [],
                      'issues_found': [],
                      'fixes_applied': [],
                      'summary': {}
                  }
          
              def authenticate(self) -> bool:
                  """Authenticate with Google Search Console API"""
                  try:
                      credentials = service_account.Credentials.from_service_account_file(
                          self.service_account_path,
                          scopes=['https://www.googleapis.com/auth/webmasters']
                      )
                      self.service = build('webmasters', 'v3', credentials=credentials)
                      print("Successfully authenticated with Google Search Console")
                      return True
                  except Exception as e:
                      print(f"Authentication failed: {e}")
                      self.results['issues_found'].append(f"Authentication failed: {e}")
                      return False
          
              def validate_sitemap_url(self, sitemap_url: str) -> Tuple[bool, str]:
                  """Validate if sitemap URL is accessible and contains valid XML"""
                  try:
                      print(f"Validating sitemap: {sitemap_url}")
                      response = requests.get(sitemap_url, timeout=30, headers={
                          'User-Agent': 'Googlebot/2.1 (+http://www.google.com/bot.html)'
                      })
                      
                      if response.status_code != 200:
                          return False, f"HTTP {response.status_code}: {response.reason}"
                      
                      # Check if it's valid XML
                      try:
                          root = ET.fromstring(response.content)
                          # Check if it's a sitemap or sitemap index
                          if root.tag.endswith('sitemapindex') or root.tag.endswith('urlset'):
                              url_count = len(root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}url'))
                              sitemap_count = len(root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}sitemap'))
                              
                              if url_count > 0:
                                  return True, f"Valid sitemap with {url_count} URLs"
                              elif sitemap_count > 0:
                                  return True, f"Valid sitemap index with {sitemap_count} sitemaps"
                              else:
                                  return False, "Sitemap contains no URLs or sub-sitemaps"
                          else:
                              return False, "Not a valid sitemap XML format"
                      except ET.ParseError as e:
                          return False, f"XML parsing error: {e}"
                          
                  except requests.RequestException as e:
                      return False, f"Request failed: {e}"
          
              def get_sitemap_status(self, site_url: str, sitemap_url: str) -> Dict:
                  """Get sitemap status from Google Search Console"""
                  try:
                      print(f"Checking sitemap status: {sitemap_url}")
                      result = self.service.sitemaps().get(
                          siteUrl=site_url,
                          feedpath=sitemap_url
                      ).execute()
                      
                      return {
                          'url': sitemap_url,
                          'status': 'submitted',
                          'type': result.get('type', 'unknown'),
                          'isPending': result.get('isPending', False),
                          'isSitemapsIndex': result.get('isSitemapsIndex', False),
                          'submitted': result.get('submitted'),
                          'lastSubmitted': result.get('lastSubmitted'),
                          'lastDownloaded': result.get('lastDownloaded'),
                          'warnings': result.get('warnings', 0),
                          'errors': result.get('errors', 0),
                          'contents': result.get('contents', [])
                      }
                  except HttpError as e:
                      if e.resp.status == 404:
                          return {
                              'url': sitemap_url,
                              'status': 'not_submitted',
                              'error': 'Sitemap not found in Search Console'
                          }
                      else:
                          return {
                              'url': sitemap_url,
                              'status': 'error',
                              'error': f"API error: {e}"
                          }
          
              def submit_sitemap(self, site_url: str, sitemap_url: str) -> bool:
                  """Submit sitemap to Google Search Console"""
                  try:
                      print(f"Submitting sitemap: {sitemap_url}")
                      self.service.sitemaps().submit(
                          siteUrl=site_url,
                          feedpath=sitemap_url
                      ).execute()
                      print(f"Successfully submitted sitemap: {sitemap_url}")
                      self.results['fixes_applied'].append(f"Submitted sitemap: {sitemap_url}")
                      return True
                  except HttpError as e:
                      error_msg = f"Failed to submit sitemap {sitemap_url}: {e}"
                      print(f"{error_msg}")
                      self.results['issues_found'].append(error_msg)
                      return False
          
              def delete_sitemap(self, site_url: str, sitemap_url: str) -> bool:
                  """Delete sitemap from Google Search Console"""
                  try:
                      print(f"Deleting sitemap: {sitemap_url}")
                      self.service.sitemaps().delete(
                          siteUrl=site_url,
                          feedpath=sitemap_url
                      ).execute()
                      print(f"Successfully deleted sitemap: {sitemap_url}")
                      self.results['fixes_applied'].append(f"Deleted invalid sitemap: {sitemap_url}")
                      return True
                  except HttpError as e:
                      error_msg = f"Failed to delete sitemap {sitemap_url}: {e}"
                      print(f"{error_msg}")
                      self.results['issues_found'].append(error_msg)
                      return False
          
              def monitor_sitemaps(self, site_url: str, sitemap_urls: List[str], force_resubmit: bool = False) -> Dict:
                  """Monitor and fix sitemap issues"""
                  self.site_url = site_url
                  self.results['site_url'] = site_url
                  
                  if not self.authenticate():
                      return self.results
                  
                  print(f"\nMonitoring site: {site_url}")
                  print(f"Checking {len(sitemap_urls)} sitemap(s)")
                  
                  for sitemap_url in sitemap_urls:
                      print(f"\n{'='*60}")
                      print(f"Processing: {sitemap_url}")
                      
                      # Validate sitemap accessibility
                      is_valid, validation_msg = self.validate_sitemap_url(sitemap_url)
                      
                      sitemap_result = {
                          'url': sitemap_url,
                          'validation': {
                              'is_valid': is_valid,
                              'message': validation_msg
                          }
                      }
                      
                      if not is_valid:
                          error_msg = f"Sitemap validation failed for {sitemap_url}: {validation_msg}"
                          print(f"{error_msg}")
                          self.results['issues_found'].append(error_msg)
                          sitemap_result['status'] = 'validation_failed'
                          sitemap_result['action'] = 'none - invalid sitemap'
                      else:
                          print(f"Sitemap validation passed: {validation_msg}")
                          
                          # Get current status from Search Console
                          gsc_status = self.get_sitemap_status(site_url, sitemap_url)
                          sitemap_result.update(gsc_status)
                          
                          # Determine action needed
                          action_taken = self.determine_and_execute_action(
                              site_url, sitemap_url, gsc_status, force_resubmit
                          )
                          sitemap_result['action'] = action_taken
                      
                      self.results['sitemaps'].append(sitemap_result)
                  
                  # Generate summary
                  self.generate_summary()
                  return self.results
          
              def determine_and_execute_action(self, site_url: str, sitemap_url: str, 
                                             status: Dict, force_resubmit: bool) -> str:
                  """Determine what action to take and execute it"""
                  
                  if status['status'] == 'error':
                      return f"error - {status.get('error', 'unknown error')}"
                  
                  elif status['status'] == 'not_submitted' or force_resubmit:
                      if self.submit_sitemap(site_url, sitemap_url):
                          return 'submitted'
                      else:
                          return 'submission_failed'
                  
                  elif status['status'] == 'submitted':
                      # Check for issues
                      errors = status.get('errors', 0)
                      warnings = status.get('warnings', 0)
                      is_pending = status.get('isPending', False)
                      
                      if errors > 0:
                          error_msg = f"Sitemap {sitemap_url} has {errors} errors"
                          print(f"{error_msg}")
                          self.results['issues_found'].append(error_msg)
                          
                          # Resubmit to try to fix errors
                          if self.submit_sitemap(site_url, sitemap_url):
                              return f're-submitted (had {errors} errors)'
                          else:
                              return f'resubmission_failed ({errors} errors)'
                      
                      elif warnings > 0:
                          warning_msg = f"Sitemap {sitemap_url} has {warnings} warnings"
                          print(f"{warning_msg}")
                          self.results['issues_found'].append(warning_msg)
                          return f'ok_with_warnings ({warnings} warnings)'
                      
                      elif is_pending:
                          print(f"Sitemap {sitemap_url} is pending processing")
                          return 'pending_processing'
                      
                      else:
                          print(f"Sitemap {sitemap_url} is healthy")
                          return 'healthy'
                  
                  return 'unknown_status'
          
              def generate_summary(self):
                  """Generate summary statistics"""
                  total_sitemaps = len(self.results['sitemaps'])
                  healthy_count = sum(1 for s in self.results['sitemaps'] 
                                    if s.get('action') == 'healthy')
                  error_count = len(self.results['issues_found'])
                  fixes_count = len(self.results['fixes_applied'])
                  
                  self.results['summary'] = {
                      'total_sitemaps': total_sitemaps,
                      'healthy_sitemaps': healthy_count,
                      'issues_found': error_count,
                      'fixes_applied': fixes_count,
                      'overall_status': 'healthy' if error_count == 0 else 'issues_detected'
                  }
          
              def generate_report(self, detailed: bool = True) -> str:
                  """Generate human-readable report"""
                  summary = self.results['summary']
                  report = []
                  
                  report.append("# Sitemap Monitor Report")
                  report.append(f"**Generated:** {self.results['timestamp']}")
                  report.append(f"**Site:** {self.results['site_url']}")
                  report.append("")
                  
                  # Status badge
                  if summary['overall_status'] == 'healthy':
                      report.append("## Overall Status: HEALTHY")
                  else:
                      report.append("## Overall Status: ISSUES DETECTED")
                  
                  report.append("")
                  
                  # Summary stats
                  report.append("## Summary")
                  report.append(f"- **Total Sitemaps:** {summary['total_sitemaps']}")
                  report.append(f"- **Healthy Sitemaps:** {summary['healthy_sitemaps']}")
                  report.append(f"- **Issues Found:** {summary['issues_found']}")
                  report.append(f"- **Fixes Applied:** {summary['fixes_applied']}")
                  report.append("")
                  
                  if detailed:
                      # Detailed sitemap status
                      report.append("## Detailed Sitemap Status")
                      for sitemap in self.results['sitemaps']:
                          url = sitemap['url']
                          action = sitemap.get('action', 'unknown')
                          
                          if action == 'healthy':
                              status_emoji = "✅"
                          elif 'error' in action.lower() or 'failed' in action.lower():
                              status_emoji = "❌"
                          elif 'warning' in action.lower():
                              status_emoji = "⚠️"
                          else:
                              status_emoji = "ℹ️"
                          
                          report.append(f"### {status_emoji} {url}")
                          report.append(f"**Action:** {action}")
                          
                          if 'validation' in sitemap:
                              val = sitemap['validation']
                              report.append(f"**Validation:** {'✅ Valid' if val['is_valid'] else '❌ Invalid'} - {val['message']}")
                          
                          if 'lastDownloaded' in sitemap:
                              report.append(f"**Last Downloaded:** {sitemap['lastDownloaded']}")
                          
                          if 'errors' in sitemap and sitemap['errors'] > 0:
                              report.append(f"**Errors:** {sitemap['errors']}")
                          
                          if 'warnings' in sitemap and sitemap['warnings'] > 0:
                              report.append(f"**Warnings:** {sitemap['warnings']}")
                          
                          report.append("")
                  
                  # Issues section
                  if self.results['issues_found']:
                      report.append("## Issues Found")
                      for issue in self.results['issues_found']:
                          report.append(f"- {issue}")
                      report.append("")
                  
                  # Fixes section
                  if self.results['fixes_applied']:
                      report.append("## Fixes Applied")
                      for fix in self.results['fixes_applied']:
                          report.append(f"- {fix}")
                      report.append("")
                  
                  return "\n".join(report)
          
          def main():
              parser = argparse.ArgumentParser(description='Enhanced Sitemap Monitor')
              parser.add_argument('--site', required=True, help='Site URL (e.g., https://example.com/)')
              parser.add_argument('--sitemaps', required=True, nargs='+', help='Sitemap URLs to monitor')
              parser.add_argument('--force-resubmit', action='store_true', help='Force resubmit all sitemaps')
              parser.add_argument('--detailed-report', action='store_true', default=True, help='Generate detailed report')
              parser.add_argument('--service-account', default='service-account.json', help='Service account JSON file')
              parser.add_argument('--output-json', help='Output results to JSON file')
              parser.add_argument('--output-report', help='Output report to markdown file')
              
              args = parser.parse_args()
              
              print("Enhanced Sitemap Monitor Starting...")
              print(f"Timestamp: {datetime.now(timezone.utc).isoformat()}")
              
              monitor = SitemapMonitor(args.service_account)
              results = monitor.monitor_sitemaps(args.site, args.sitemaps, args.force_resubmit)
              
              # Output JSON results
              if args.output_json:
                  with open(args.output_json, 'w') as f:
                      json.dump(results, f, indent=2)
                  print(f"Results saved to: {args.output_json}")
              
              # Generate and output report
              report = monitor.generate_report(args.detailed_report)
              print("\n" + "="*80)
              print(report)
              
              if args.output_report:
                  with open(args.output_report, 'w') as f:
                      f.write(report)
                  print(f"Report saved to: {args.output_report}")
              
              # Set exit code based on results
              if results['summary']['overall_status'] != 'healthy':
                  print(f"\nExiting with error code 1 - Issues detected")
                  sys.exit(1)
              else:
                  print(f"\nAll sitemaps healthy - Exiting with code 0")
                  sys.exit(0)
          
          if __name__ == '__main__':
              main()
          EOF

      - name: Create Email Reporter Script
        run: |
          cat > email_sitemap_reporter.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import json
          import smtplib
          import ssl
          import argparse
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from email.mime.base import MIMEBase
          from email import encoders
          from datetime import datetime, timezone
          from pathlib import Path
          from typing import Dict, List, Optional

          try:
              from jinja2 import Template
          except ImportError:
              print("Missing jinja2 dependency")
              sys.exit(1)

          class EmailSitemapReporter:
              def __init__(self, smtp_config: Dict):
                  self.smtp_config = smtp_config
                  self.validate_smtp_config()
              
              def validate_smtp_config(self):
                  required_fields = ["server", "port", "username", "password", "from_email"]
                  missing_fields = [field for field in required_fields if field not in self.smtp_config]
                  
                  if missing_fields:
                      raise ValueError(f"Missing SMTP configuration fields: {missing_fields}")
              
              def load_sitemap_results(self, results_file: str) -> Dict:
                  try:
                      with open(results_file, "r") as f:
                          return json.load(f)
                  except FileNotFoundError:
                      raise FileNotFoundError(f"Results file not found: {results_file}")
                  except json.JSONDecodeError:
                      raise ValueError(f"Invalid JSON in results file: {results_file}")
              
              def generate_html_report(self, results: Dict, workflow_url: str = None) -> str:
                  template_str = """
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Sitemap Monitor Report</title>
              <style>
                  body { font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }
                  .container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; text-align: center; }
                  .status-healthy { background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); }
                  .status-issues { background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%); }
                  .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
                  .summary-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff; text-align: center; }
                  .summary-card h3 { margin: 0 0 10px 0; color: #495057; font-size: 2.5em; }
                  .sitemap-item { background: #fff; border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 15px 0; border-left: 4px solid #28a745; }
                  .sitemap-item.error { border-left-color: #dc3545; }
                  .sitemap-item.warning { border-left-color: #ffc107; }
                  .sitemap-url { font-weight: bold; color: #007bff; word-break: break-all; margin-bottom: 10px; }
                  .button { display: inline-block; background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 10px 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header {% if results.summary.overall_status == 'healthy' %}status-healthy{% else %}status-issues{% endif %}">
                      <h1>{% if results.summary.overall_status == 'healthy' %}✅ Sitemap Status: HEALTHY{% else %}⚠️ Sitemap Status: ISSUES DETECTED{% endif %}</h1>
                      <p><strong>Site:</strong> {{ results.site_url }}</p>
                      <p><strong>Generated:</strong> {{ results.timestamp }}</p>
                  </div>
                  
                  <div class="summary-grid">
                      <div class="summary-card"><h3>{{ results.summary.total_sitemaps }}</h3><p>Total Sitemaps</p></div>
                      <div class="summary-card"><h3>{{ results.summary.healthy_sitemaps }}</h3><p>Healthy Sitemaps</p></div>
                      <div class="summary-card"><h3>{{ results.summary.issues_found }}</h3><p>Issues Found</p></div>
                      <div class="summary-card"><h3>{{ results.summary.fixes_applied }}</h3><p>Fixes Applied</p></div>
                  </div>
                  
                  <h2>Sitemap Details</h2>
                  {% for sitemap in results.sitemaps %}
                  <div class="sitemap-item {% if 'error' in sitemap.action.lower() %}error{% elif 'warning' in sitemap.action.lower() %}warning{% endif %}">
                      <div class="sitemap-url">{{ sitemap.url }}</div>
                      <p><strong>Status:</strong> {{ sitemap.action }}</p>
                      {% if sitemap.validation %}
                      <p><strong>Validation:</strong> {% if sitemap.validation.is_valid %}✅ Valid{% else %}❌ Invalid{% endif %} - {{ sitemap.validation.message }}</p>
                      {% endif %}
                  </div>
                  {% endfor %}
                  
                  {% if results.issues_found %}
                  <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 20px 0;">
                      <h3>⚠️ Issues Found</h3>
                      {% for issue in results.issues_found %}
                      <p>• {{ issue }}</p>
                      {% endfor %}
                  </div>
                  {% endif %}
                  
                  {% if results.fixes_applied %}
                  <div style="background: #d1edff; border: 1px solid #74b9ff; border-radius: 8px; padding: 20px; margin: 20px 0;">
                      <h3>🔧 Fixes Applied</h3>
                      {% for fix in results.fixes_applied %}
                      <p>• {{ fix }}</p>
                      {% endfor %}
                  </div>
                  {% endif %}
                  
                  {% if workflow_url %}
                  <div style="text-align: center; margin: 30px 0;">
                      <a href="{{ workflow_url }}" class="button">View Workflow Run</a>
                  </div>
                  {% endif %}
                  
                  <div style="text-align: center; margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px; color: #6c757d;">
                      <p>This report was automatically generated by the Sitemap Monitor system.</p>
                  </div>
              </div>
          </body>
          </html>
                  """                  
                  template = Template(template_str)
                  template_vars = {
                      "results": results,
                      "workflow_url": workflow_url
                  }
                  
                  return template.render(**template_vars)
              
              def generate_text_report(self, results: Dict) -> str:
                  lines = []
                  summary = results.get("summary", {})
                  
                  lines.append("SITEMAP MONITOR REPORT")
                  lines.append("=" * 50)

                  lines.append(f"Generated: {results.get('timestamp', 'N/A')}")
                  lines.append(f"Site: {results.get('site_url', 'N/A')}")
                  lines.append("")
                  
                  if summary.get('overall_status') == 'healthy':
                      lines.append("Overall Status: HEALTHY ✅")
                  else:
                      lines.append("Overall Status: ISSUES DETECTED ⚠️")
                  
                  lines.append("")
                  lines.append("SUMMARY")
                  lines.append("-" * 20)
                  lines.append(f"Total Sitemaps: {summary.get('total_sitemaps', 0)}")
                  lines.append(f"Healthy Sitemaps: {summary.get('healthy_sitemaps', 0)}")
                  lines.append(f"Issues Found: {summary.get('issues_found', 0)}")
                  lines.append(f"Fixes Applied: {summary.get('fixes_applied', 0)}")
                  lines.append("")
                  
                  lines.append("SITEMAP DETAILS")
                  lines.append("-" * 20)
                  for sitemap in results.get('sitemaps', []):
                      url = sitemap.get('url', 'Unknown')
                      action = sitemap.get('action', 'unknown')
                      
                      if action == 'healthy':
                          status_symbol = "✅"
                      elif 'error' in action.lower() or 'failed' in action.lower():
                          status_symbol = "❌"
                      elif 'warning' in action.lower():
                          status_symbol = "⚠️"
                      else:
                          status_symbol = "ℹ️"
                      
                      lines.append(f"{status_symbol} {url}")
                      lines.append(f"   Action: {action}")
                      
                      if 'validation' in sitemap:
                          val = sitemap['validation']
                          val_status = "Valid" if val.get('is_valid') else "Invalid"
                          lines.append(f"   Validation: {val_status} - {val.get('message', 'N/A')}")
                      
                      lines.append("")
                  
                  if results.get('issues_found'):
                      lines.append("ISSUES FOUND")
                      lines.append("-" * 20)
                      for issue in results['issues_found']:
                          lines.append(f"• {issue}")
                      lines.append("")
                  
                  if results.get('fixes_applied'):
                      lines.append("FIXES APPLIED")
                      lines.append("-" * 20)
                      for fix in results['fixes_applied']:
                          lines.append(f"• {fix}")
                      lines.append("")
                  
                  return "\n".join(lines)
              
              def send_email(self, recipients: List[str], subject: str, html_content: str, 
                           text_content: str, attachments: List[str] = None) -> bool:
                  try:
                      msg = MIMEMultipart('alternative')
                      msg['From'] = self.smtp_config['from_email']
                      msg['To'] = ', '.join(recipients)
                      msg['Subject'] = subject
                      
                      # Add text and HTML parts
                      text_part = MIMEText(text_content, 'plain')
                      html_part = MIMEText(html_content, 'html')
                      
                      msg.attach(text_part)
                      msg.attach(html_part)
                      
                      # Add attachments if provided
                      if attachments:
                          for file_path in attachments:
                              if os.path.exists(file_path):
                                  with open(file_path, 'rb') as attachment:
                                      part = MIMEBase('application', 'octet-stream')
                                      part.set_payload(attachment.read())
                                  
                                  encoders.encode_base64(part)
                                  part.add_header(
                                      'Content-Disposition',
                                      f'attachment; filename= {os.path.basename(file_path)}'
                                  )
                                  msg.attach(part)
                      
                      # Send email
                      context = ssl.create_default_context()
                      
                      with smtplib.SMTP(self.smtp_config['server'], self.smtp_config['port']) as server:
                          server.starttls(context=context)
                          server.login(self.smtp_config['username'], self.smtp_config['password'])
                          server.send_message(msg)
                      
                      print(f"✅ Email sent successfully to: {', '.join(recipients)}")
                      return True
                      
                  except Exception as e:
                      print(f"❌ Failed to send email: {e}")
                      return False
              
              def should_send_email(self, results: Dict, send_on_success: bool = False) -> bool:
                  summary = results.get('summary', {})
                  has_issues = summary.get('overall_status') != 'healthy'
                  
                  return has_issues or send_on_success
              
              def generate_subject(self, results: Dict) -> str:
                  summary = results.get('summary', {})
                  site_url = results.get('site_url', 'Unknown Site')
                  
                  if summary.get('overall_status') == 'healthy':
                      return f"✅ Sitemap Monitor: All Healthy - {site_url}"
                  else:
                      issues_count = summary.get('issues_found', 0)
                      fixes_count = summary.get('fixes_applied', 0)
                      return f"⚠️ Sitemap Monitor: {issues_count} Issues, {fixes_count} Fixes - {site_url}"

          def main():
              parser = argparse.ArgumentParser(description='Email Sitemap Reporter')
              parser.add_argument('--results-file', required=True, help='JSON results file from sitemap monitor')
              parser.add_argument('--recipients', required=True, help='Comma-separated email recipients')
              parser.add_argument('--smtp-server', required=True, help='SMTP server hostname')
              parser.add_argument('--smtp-port', type=int, default=587, help='SMTP server port')
              parser.add_argument('--smtp-username', required=True, help='SMTP username')
              parser.add_argument('--smtp-password', required=True, help='SMTP password')
              parser.add_argument('--from-email', required=True, help='From email address')
              parser.add_argument('--send-on-success', action='store_true', help='Send email even when all healthy')
              parser.add_argument('--workflow-url', help='GitHub workflow run URL')
              parser.add_argument('--attachments', nargs='*', help='Files to attach to email')
              
              args = parser.parse_args()
              
              smtp_config = {
                  'server': args.smtp_server,
                  'port': args.smtp_port,
                  'username': args.smtp_username,
                  'password': args.smtp_password,
                  'from_email': args.from_email
              }
              
              try:
                  reporter = EmailSitemapReporter(smtp_config)
                  results = reporter.load_sitemap_results(args.results_file)
                  
                  recipients = [email.strip() for email in args.recipients.split(',')]
                  
                  if reporter.should_send_email(results, args.send_on_success):
                      subject = reporter.generate_subject(results)
                      html_content = reporter.generate_html_report(results, args.workflow_url)
                      text_content = reporter.generate_text_report(results)
                      
                      success = reporter.send_email(
                          recipients=recipients,
                          subject=subject,
                          html_content=html_content,
                          text_content=text_content,
                          attachments=args.attachments or []
                      )
                      
                      if success:
                          print("Email report sent successfully")
                          sys.exit(0)
                      else:
                          print("Failed to send email report")
                          sys.exit(1)
                  else:
                      print("No email sent - all sitemaps healthy and send_on_success=False")
                      sys.exit(0)
                      
              except Exception as e:
                  print(f"Error: {e}")
                  sys.exit(1)

          if __name__ == '__main__':
              main()
          EOF

      - name: Run enhanced sitemap monitoring
        id: sitemap_check
        continue-on-error: true
        run: |
          echo "Running sitemap monitor..."
          
          # Convert sitemap URLs from environment variable to array
          IFS=',' read -ra SITEMAP_ARRAY <<< "$SITEMAP_URLS"
          
          # Prepare arguments
          MONITOR_ARGS="--site \"$SITE_URL\""
          for sitemap in "${SITEMAP_ARRAY[@]}"; do
            MONITOR_ARGS="$MONITOR_ARGS --sitemaps \"$sitemap\""
          done
          
          if [ "${{ inputs.force_resubmit }}" = "true" ]; then
            MONITOR_ARGS="$MONITOR_ARGS --force-resubmit"
          fi
          
          MONITOR_ARGS="$MONITOR_ARGS --detailed-report --output-json sitemap_results.json --output-report sitemap_report.md"
          
          # Run the monitor
          eval "python enhanced_sitemap_monitor.py $MONITOR_ARGS"
          MONITOR_EXIT_CODE=$?
          
          echo "monitor_exit_code=$MONITOR_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Always continue to email step regardless of monitor results
          exit 0

      - name: Send email report
        if: steps.validate_env.outputs.email_config_valid == 'true'
        run: |
          echo "Preparing to send email report..."
          
          # Determine if we should send email
          SEND_ON_SUCCESS="${{ inputs.send_email_on_success }}"
          if [ "$SEND_ON_SUCCESS" != "true" ]; then
            SEND_ON_SUCCESS="false"
          fi
          
          # Get workflow run URL
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Prepare email command
          EMAIL_CMD="python email_sitemap_reporter.py"
          EMAIL_CMD="$EMAIL_CMD --results-file sitemap_results.json"
          EMAIL_CMD="$EMAIL_CMD --recipients \"${{ steps.validate_env.outputs.email_recipients }}\""
          EMAIL_CMD="$EMAIL_CMD --smtp-server \"${{ vars.SMTP_SERVER || 'smtp.gmail.com' }}\""
          EMAIL_CMD="$EMAIL_CMD --smtp-port ${{ vars.SMTP_PORT || '587' }}"
          EMAIL_CMD="$EMAIL_CMD --smtp-username \"${{ secrets.SMTP_USERNAME }}\""
          EMAIL_CMD="$EMAIL_CMD --smtp-password \"${{ secrets.SMTP_PASSWORD }}\""
          EMAIL_CMD="$EMAIL_CMD --from-email \"${{ secrets.SMTP_FROM_EMAIL }}\""
          EMAIL_CMD="$EMAIL_CMD --workflow-url \"$WORKFLOW_URL\""
          
          if [ "$SEND_ON_SUCCESS" = "true" ]; then
            EMAIL_CMD="$EMAIL_CMD --send-on-success"
          fi
          
          # Add attachments if they exist
          ATTACHMENTS=""
          if [ -f "sitemap_results.json" ]; then
            ATTACHMENTS="$ATTACHMENTS sitemap_results.json"
          fi
          if [ -f "sitemap_report.md" ]; then
            ATTACHMENTS="$ATTACHMENTS sitemap_report.md"
          fi
          
          if [ -n "$ATTACHMENTS" ]; then
            EMAIL_CMD="$EMAIL_CMD --attachments $ATTACHMENTS"
          fi
          
          # Send email
          eval "$EMAIL_CMD"
          EMAIL_EXIT_CODE=$?
          
          if [ $EMAIL_EXIT_CODE -eq 0 ]; then
            echo "✅ Email report sent successfully"
          else
            echo "❌ Failed to send email report (exit code: $EMAIL_EXIT_CODE)"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sitemap-monitor-results-${{ github.run_id }}
          path: |
            sitemap_results.json
            sitemap_report.md
          retention-days: 30

      - name: Create GitHub issue on persistent failures
        if: steps.sitemap_check.outputs.monitor_exit_code != '0' && github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let results = {};
            try {
              const data = fs.readFileSync('sitemap_results.json', 'utf8');
              results = JSON.parse(data);
            } catch (error) {
              console.log('Could not read results file:', error);
            }
            
            const summary = results.summary || {};
            const issuesCount = summary.issues_found || 0;
            const fixesCount = summary.fixes_applied || 0;
            
            const title = `Sitemap Monitor: ${issuesCount} Issues Detected`;
            const body = `
            # Sitemap Monitor Report
            
            **Status:** Issues Detected ⚠️
            **Site:** ${results.site_url || process.env.SITE_URL}
            **Timestamp:** ${results.timestamp || new Date().toISOString()}
            **Workflow Run:** [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ## Summary
            - **Total Sitemaps:** ${summary.total_sitemaps || 0}
            - **Healthy Sitemaps:** ${summary.healthy_sitemaps || 0}
            - **Issues Found:** ${issuesCount}
            - **Fixes Applied:** ${fixesCount}
            
            ## Issues Found
            ${results.issues_found ? results.issues_found.map(issue => `- ${issue}`).join('\n') : 'No specific issues listed'}
            
            ## Fixes Applied
            ${results.fixes_applied ? results.fixes_applied.map(fix => `- ${fix}`).join('\n') : 'No fixes applied'}
            
            ---
            This issue was automatically created by the Sitemap Monitor workflow.
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['sitemap-monitor', 'automated']
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Sitemap Monitor:') && 
              issue.created_at > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['sitemap-monitor', 'automated', 'bug']
              });
              console.log('Created new issue for sitemap monitoring failures');
            } else {
              console.log('Similar issue already exists, skipping creation');
            }

      - name: Final status report
        if: always()
        run: |
          echo "=== SITEMAP MONITOR WORKFLOW SUMMARY ==="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Site URL: $SITE_URL"
          echo "Sitemap URLs: $SITEMAP_URLS"
          echo ""
          
          if [ -f "sitemap_results.json" ]; then
            echo "✅ Sitemap monitoring completed - Results available"
            echo "📊 Results summary:"
            python -c "
          import json
          try:
              with open('sitemap_results.json') as f:
                  data = json.load(f)
                  summary = data.get('summary', {})
                  print(f'  • Total Sitemaps: {summary.get(\"total_sitemaps\", 0)}')
                  print(f'  • Healthy Sitemaps: {summary.get(\"healthy_sitemaps\", 0)}')
                  print(f'  • Issues Found: {summary.get(\"issues_found\", 0)}')
                  print(f'  • Fixes Applied: {summary.get(\"fixes_applied\", 0)}')
                  print(f'  • Overall Status: {summary.get(\"overall_status\", \"unknown\").upper()}')
          except Exception as e:
              print(f'  • Error reading results: {e}')
          "
          else
            echo "❌ No results file found - Monitoring may have failed"
          fi
          
          echo "=== END WORKFLOW ===" 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-oauthlib google-auth-httplib2
          pip install requests beautifulsoup4 lxml tabulate colorama
          pip install python-dateutil pytz markdown2 jinja2

      - name: Setup service account credentials
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > service-account.json
          chmod 600 service-account.json

      - name: Validate environment and email configuration
        id: validate_env
        run: |
          echo "=== Environment Validation ==="
          python --version
          
          # Validate service account
          if [ -f "service-account.json" ]; then
            if python -c "import json; json.load(open('service-account.json'))" 2>/dev/null; then
              echo "✅ Service account JSON is valid"
              python -c "
          import json
          with open('service-account.json') as f:
              data = json.load(f)
              required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id']
              missing = [field for field in required_fields if field not in data]
              if missing:
                  print(f'❌ Missing required fields: {missing}')
                  exit(1)
              else:
                  print('✅ All required service account fields present')
          "
            else
              echo "❌ Service account JSON is invalid"
              exit 1
            fi
>>>>>>> 57a812050eab0dbaec956cf8749863bf3096e4f5
          else
            echo "📧 Email configuration: INVALID or INCOMPLETE"
          fi
          
          echo ""
          echo "🔗 Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "=== END SUMMARY ==="
