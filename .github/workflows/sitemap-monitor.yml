name: Enhanced Sitemap Monitor & Status Reporter

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  schedule:
    - cron: '0 12 * * 1' # Weekly on Mondays at 12:00 UTC
    - cron: '0 6 * * *'  # Daily health check at 6:00 UTC
  workflow_dispatch:
    inputs:
      force_resubmit:
        description: 'Force resubmit all sitemaps'
        required: false
        default: 'false'
        type: boolean
      detailed_report:
        description: 'Generate detailed status report'
        required: false
        default: 'true'
        type: boolean

jobs:
  sitemap-status-monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-oauthlib google-auth-httplib2
          pip install requests beautifulsoup4 lxml tabulate colorama
          pip install python-dateutil pytz

      - name: Setup service account credentials
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > service-account.json
          chmod 600 service-account.json

      - name: Validate environment
        run: |
          echo "=== Environment Validation ==="
          python --version
          echo "Service account validation:"
          if python -c "import json; json.load(open('service-account.json'))" 2>/dev/null; then
            echo "✅ Service account JSON is valid"
          else
            echo "❌ Invalid service account JSON"
            exit 1
          fi

      - name: Create enhanced sitemap monitoring script
        run: |
          cat > enhanced_sitemap_monitor.py << 'EOF'
          #!/usr/bin/env python3
          import os, sys, json, argparse, traceback
          from datetime import datetime, timezone
          from typing import Dict, List, Tuple
          import requests
          import xml.etree.ElementTree as ET

          class SitemapMonitor:
              def __init__(self, service_account_path: str):
                  self.service_account_path = service_account_path
                  self.service = None
                  self.site_url = None
                  self.results = {
                      'timestamp': datetime.now(timezone.utc).isoformat(),
                      'site_url': None,
                      'sitemaps': [],
                      'issues_found': [],
                      'fixes_applied': [],
                      'summary': {},
                      'errors': []
                  }

              def authenticate(self) -> bool:
                  try:
                      # Try to import Google API libraries
                      from google.oauth2 import service_account
                      from googleapiclient.discovery import build
                      
                      credentials = service_account.Credentials.from_service_account_file(
                          self.service_account_path,
                          scopes=['https://www.googleapis.com/auth/webmasters']
                      )
                      self.service = build('webmasters', 'v3', credentials=credentials)
                      print("✅ Authenticated with Google Search Console")
                      return True
                  except ImportError as e:
                      error_msg = f"Google API libraries not available: {e}"
                      print(f"⚠️ {error_msg}")
                      self.results['errors'].append(error_msg)
                      return False
                  except Exception as e:
                      error_msg = f"Authentication failed: {e}"
                      print(f"❌ {error_msg}")
                      self.results['issues_found'].append(error_msg)
                      return False

              def validate_sitemap_url(self, sitemap_url: str) -> Tuple[bool, str]:
                  try:
                      response = requests.get(sitemap_url, timeout=30, headers={
                          'User-Agent': 'Googlebot/2.1 (+http://www.google.com/bot.html)'
                      })
                      if response.status_code != 200:
                          return False, f"HTTP {response.status_code}: {response.reason}"
                      
                      try:
                          root = ET.fromstring(response.content)
                          if root.tag.endswith('sitemapindex') or root.tag.endswith('urlset'):
                              url_count = len(root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}url'))
                              sitemap_count = len(root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}sitemap'))
                              if url_count > 0:
                                  return True, f"Valid sitemap with {url_count} URLs"
                              elif sitemap_count > 0:
                                  return True, f"Valid sitemap index with {sitemap_count} sitemaps"
                              else:
                                  return False, "Sitemap contains no URLs"
                          else:
                              return False, "Not a valid sitemap format"
                      except ET.ParseError as e:
                          return False, f"XML parsing error: {e}"
                  except requests.RequestException as e:
                      return False, f"Request failed: {e}"
                  except Exception as e:
                      return False, f"Unexpected error: {e}"

              def get_sitemap_status(self, site_url: str, sitemap_url: str) -> Dict:
                  if not self.service:
                      return {'url': sitemap_url, 'status': 'no_gsc_access', 'error': 'No GSC authentication'}
                  
                  try:
                      from googleapiclient.errors import HttpError
                      result = self.service.sitemaps().get(
                          siteUrl=site_url,
                          feedpath=sitemap_url
                      ).execute()
                      return {
                          'url': sitemap_url,
                          'status': 'submitted',
                          'errors': result.get('errors', 0),
                          'warnings': result.get('warnings', 0),
                          'isPending': result.get('isPending', False),
                          'lastDownloaded': result.get('lastDownloaded'),
                      }
                  except ImportError:
                      return {'url': sitemap_url, 'status': 'no_gsc_access', 'error': 'Google API not available'}
                  except Exception as e:
                      if 'HttpError' in str(type(e)) and '404' in str(e):
                          return {'url': sitemap_url, 'status': 'not_submitted', 'error': 'Not in GSC'}
                      else:
                          return {'url': sitemap_url, 'status': 'error', 'error': str(e)}

              def submit_sitemap(self, site_url: str, sitemap_url: str) -> bool:
                  if not self.service:
                      self.results['issues_found'].append(f"Cannot submit {sitemap_url}: No GSC access")
                      return False
                  
                  try:
                      from googleapiclient.errors import HttpError
                      self.service.sitemaps().submit(siteUrl=site_url, feedpath=sitemap_url).execute()
                      self.results['fixes_applied'].append(f"Submitted {sitemap_url}")
                      return True
                  except ImportError:
                      self.results['issues_found'].append(f"Submit failed for {sitemap_url}: Google API not available")
                      return False
                  except Exception as e:
                      self.results['issues_found'].append(f"Submit failed for {sitemap_url}: {e}")
                      return False

              def monitor_sitemaps(self, site_url: str, sitemap_urls: List[str], force_resubmit: bool = False):
                  self.site_url = site_url
                  self.results['site_url'] = site_url
                  
                  # Try authentication but continue even if it fails
                  gsc_available = self.authenticate()
                  
                  for sitemap_url in sitemap_urls:
                      try:
                          valid, msg = self.validate_sitemap_url(sitemap_url)
                          entry = {'url': sitemap_url, 'validation': {'is_valid': valid, 'message': msg}}
                          
                          if not valid:
                              entry['status'] = 'validation_failed'
                              self.results['issues_found'].append(f"Validation failed {sitemap_url}: {msg}")
                          else:
                              # Only try GSC operations if authentication succeeded
                              if gsc_available:
                                  status = self.get_sitemap_status(site_url, sitemap_url)
                                  entry.update(status)
                                  
                                  if status['status'] == 'not_submitted' or force_resubmit:
                                      if self.submit_sitemap(site_url, sitemap_url):
                                          entry['action'] = 'submitted'
                                      else:
                                          entry['action'] = 'submit_failed'
                                  elif status['status'] == 'submitted' and status.get('errors', 0) > 0:
                                      if self.submit_sitemap(site_url, sitemap_url):
                                          entry['action'] = f"re-submitted (errors={status['errors']})"
                                      else:
                                          entry['action'] = 'resubmit_failed'
                                  else:
                                      entry['action'] = 'healthy'
                              else:
                                  entry['status'] = 'validation_only'
                                  entry['action'] = 'gsc_unavailable'
                          
                          self.results['sitemaps'].append(entry)
                      except Exception as e:
                          error_entry = {
                              'url': sitemap_url, 
                              'status': 'error', 
                              'error': str(e),
                              'action': 'failed'
                          }
                          self.results['sitemaps'].append(error_entry)
                          self.results['issues_found'].append(f"Error processing {sitemap_url}: {e}")

                  # Calculate summary
                  total_issues = len(self.results['issues_found']) + len(self.results['errors'])
                  self.results['summary'] = {
                      'total_sitemaps': len(self.results['sitemaps']),
                      'issues_found': total_issues,
                      'fixes_applied': len(self.results['fixes_applied']),
                      'overall_status': 'healthy' if total_issues == 0 else 'issues_detected',
                      'gsc_available': gsc_available
                  }
                  return self.results

              def generate_report(self, detailed=True):
                  s = self.results['summary']
                  report = [
                      f"# Sitemap Report", 
                      f"Generated: {self.results['timestamp']}", 
                      ""
                  ]
                  report.append(f"## Status: {s['overall_status'].upper()}")
                  report.append(f"- Total sitemaps: {s['total_sitemaps']}")
                  report.append(f"- Issues found: {s['issues_found']}")
                  report.append(f"- Fixes applied: {s['fixes_applied']}")
                  report.append(f"- GSC Available: {'✅' if s.get('gsc_available') else '❌'}")
                  
                  if self.results['errors']:
                      report.append("\n## ⚠️ System Errors:")
                      for error in self.results['errors']:
                          report.append(f"- {error}")
                  
                  if detailed and self.results['sitemaps']:
                      report.append("\n## 📊 Sitemap Details:")
                      for sm in self.results['sitemaps']:
                          report.append(f"### {sm['url']}")
                          report.append(f"- Status: {sm.get('status', 'unknown')}")
                          report.append(f"- Action: {sm.get('action', 'none')}")
                          if 'validation' in sm:
                              report.append(f"- Validation: {sm['validation']['message']}")
                  
                  return "\n".join(report)

          def main():
              try:
                  parser = argparse.ArgumentParser()
                  parser.add_argument('--site', required=True)
                  parser.add_argument('--sitemaps', required=True, nargs='+')
                  parser.add_argument('--force-resubmit', action='store_true')
                  parser.add_argument('--detailed-report', dest='detailed_report', action='store_true')
                  parser.add_argument('--no-detailed-report', dest='detailed_report', action='store_false')
                  parser.set_defaults(detailed_report=True)
                  parser.add_argument('--service-account', default='service-account.json')
                  parser.add_argument('--output-json')
                  parser.add_argument('--output-report')
                  args = parser.parse_args()

                  monitor = SitemapMonitor(args.service_account)
                  results = monitor.monitor_sitemaps(args.site, args.sitemaps, args.force_resubmit)
                  
                  # Always write output files
                  if args.output_json:
                      with open(args.output_json, 'w') as f: 
                          json.dump(results, f, indent=2)
                  
                  report = monitor.generate_report(args.detailed_report)
                  if args.output_report:
                      with open(args.output_report, 'w') as f: 
                          f.write(report)
                  
                  print(report)
                  
                  # Exit with appropriate code
                  if results['summary']['overall_status'] == 'healthy':
                      sys.exit(0)
                  else:
                      sys.exit(1)
                      
              except Exception as e:
                  # Emergency fallback - always create minimal output
                  error_result = {
                      'timestamp': datetime.now(timezone.utc).isoformat(),
                      'summary': {
                          'overall_status': 'script_failed',
                          'issues_found': 1,
                          'fixes_applied': 0,
                          'error': str(e)
                      },
                      'sitemaps': [],
                      'issues_found': [f"Script failure: {e}"],
                      'fixes_applied': []
                  }
                  
                  # Write emergency output files
                  if '--output-json' in sys.argv:
                      json_idx = sys.argv.index('--output-json') + 1
                      if json_idx < len(sys.argv):
                          try:
                              with open(sys.argv[json_idx], 'w') as f:
                                  json.dump(error_result, f, indent=2)
                          except:
                              pass
                  
                  if '--output-report' in sys.argv:
                      report_idx = sys.argv.index('--output-report') + 1
                      if report_idx < len(sys.argv):
                          try:
                              with open(sys.argv[report_idx], 'w') as f:
                                  f.write(f"# SCRIPT FAILED\n\nError: {e}\n\nTraceback:\n{traceback.format_exc()}")
                          except:
                              pass
                  
                  print(f"FATAL ERROR: {e}")
                  print(f"Traceback: {traceback.format_exc()}")
                  sys.exit(2)

          if __name__ == "__main__": 
              main()
          EOF

      - name: Run Enhanced Sitemap Monitor
        id: sitemap_check
        run: |
          python enhanced_sitemap_monitor.py \
            --site "https://sednabcn.github.io/" \
            --sitemaps "https://sednabcn.github.io/sitemap.xml" \
            --output-json "sitemap-results.json" \
            --output-report "sitemap-report.md" \
            ${{ inputs.force_resubmit == 'true' && '--force-resubmit' || '' }} \
            ${{ inputs.detailed_report == 'false' && '--no-detailed-report' || '--detailed-report' }}
        continue-on-error: true

      - name: Ensure Output Files Exist
        run: |
          # Create minimal files if they don't exist
          if [ ! -f "sitemap-results.json" ]; then
            echo '{"summary":{"overall_status":"no_output","issues_found":1,"fixes_applied":0},"sitemaps":[],"issues_found":["No results file created"],"fixes_applied":[]}' > sitemap-results.json
          fi
          if [ ! -f "sitemap-report.md" ]; then
            echo "# Sitemap Monitor Failed\nNo report was generated." > sitemap-report.md
          fi

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sitemap-monitor-results-${{ github.run_number }}
          path: |
            sitemap-results.json
            sitemap-report.md
          retention-days: 30

      - name: Check Results and Set Status
        id: check_results
        run: |
          if [ -f "sitemap-results.json" ]; then
            ISSUES_COUNT=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['issues_found'])" 2>/dev/null || echo "1")
            FIXES_COUNT=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['fixes_applied'])" 2>/dev/null || echo "0")
            OVERALL_STATUS=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['overall_status'])" 2>/dev/null || echo "error")
            echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
            echo "fixes_count=$FIXES_COUNT" >> $GITHUB_OUTPUT
            echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
            
            if [ "$OVERALL_STATUS" = "healthy" ]; then
              echo "status_emoji=✅" >> $GITHUB_OUTPUT
              echo "status_message=All sitemaps healthy" >> $GITHUB_OUTPUT
            else
              echo "status_emoji=❌" >> $GITHUB_OUTPUT
              echo "status_message=Issues detected - check report" >> $GITHUB_OUTPUT
            fi
          else
            echo "status_emoji=💥" >> $GITHUB_OUTPUT
            echo "status_message=Monitor script failed completely" >> $GITHUB_OUTPUT
            echo "issues_count=1" >> $GITHUB_OUTPUT
            echo "fixes_count=0" >> $GITHUB_OUTPUT
            echo "overall_status=error" >> $GITHUB_OUTPUT
          fi

      - name: Create Scripts Directory
        run: mkdir -p scripts

      - name: Create Issue Body Script
        run: |
          cat > scripts/make-issue.js << 'EOF'
          const fs = require('fs');

          let reportContent = 'Report generation failed.';
          try {
            reportContent = fs.readFileSync('sitemap-report.md', 'utf8');
          } catch (error) {
            console.error('Could not read sitemap-report.md:', error.message);
          }

          const issueBody = `${reportContent}

          **Workflow Run:** [#${process.env.GITHUB_RUN_NUMBER}](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
          **Triggered by:** ${process.env.GITHUB_EVENT_NAME}
          **Issues Found:** ${process.env.ISSUES_COUNT}
          **Fixes Applied:** ${process.env.FIXES_COUNT}

          _Automatically created by the Enhanced Sitemap Monitor workflow._`;

          console.log(issueBody);
          EOF

      - name: Create Issue Body
        if: steps.check_results.outputs.overall_status != 'healthy'
        run: node scripts/make-issue.js > issue-body.txt
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          ISSUES_COUNT: ${{ steps.check_results.outputs.issues_count }}
          FIXES_COUNT: ${{ steps.check_results.outputs.fixes_count }}

      - name: Create or Update Issue on Problems
        if: steps.check_results.outputs.overall_status != 'healthy'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issueTitle = '🗺️ Sitemap Monitor: Issues Detected';
            const issueBody = fs.readFileSync('issue-body.txt', 'utf8');

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              labels: ['sitemap-monitor','automated']
            });
            
            const existing = issues.data.find(i => i.title === issueTitle);
            if (existing) {
              await github.rest.issues.update({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number, 
                body: issueBody 
              });
            } else {
              await github.rest.issues.create({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                title: issueTitle, 
                body: issueBody, 
                labels: ['sitemap-monitor','automated','bug'] 
              });
            }

      - name: Close Issue if All Healthy
        if: steps.check_results.outputs.overall_status == 'healthy'
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = '🗺️ Sitemap Monitor: Issues Detected';
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              labels: ['sitemap-monitor','automated']
            });
            
            const existing = issues.data.find(i => i.title === issueTitle);
            if (existing) {
              await github.rest.issues.createComment({
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number,
                body: `✅ All sitemap issues resolved!\n\nRun: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
              await github.rest.issues.update({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number, 
                state: 'closed' 
              });
            }

      - name: Update Repository Status Badge
        run: |
          mkdir -p .github/badges
          STATUS_MESSAGE="${{ steps.check_results.outputs.status_message }}"
          if [ "${{ steps.check_results.outputs.overall_status }}" = "healthy" ]; then
            COLOR="brightgreen"
          else
            COLOR="red"
          fi
          cat > .github/badges/sitemap-status.json <<EOF
          {
            "schemaVersion": 1,
            "label": "sitemap status",
            "message": "$STATUS_MESSAGE",
            "color": "$COLOR",
            "namedLogo": "google",
            "logoColor": "white"
          }
          EOF

      - name: Commit Status Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/sitemap-status.json || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🗺️ Update sitemap status badge - ${{ steps.check_results.outputs.status_message }}"
            git push
          fi

      - name: Summary
        run: |
          echo "## 🗺️ Sitemap Monitor Summary" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.check_results.outputs.status_emoji }} **Status:** ${{ steps.check_results.outputs.status_message }}" >> $GITHUB_STEP_SUMMARY
          echo "- Issues Found: ${{ steps.check_results.outputs.issues_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fixes Applied: ${{ steps.check_results.outputs.fixes_count }}" >> $GITHUB_STEP_SUMMARY
          if [ -f "sitemap-report.md" ]; then
            echo "### 📋 Detailed Report" >> $GITHUB_STEP_SUMMARY
            cat sitemap-report.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack Notification (if configured)
        if: steps.check_results.outputs.overall_status != 'healthy'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"🗺️ Sitemap Monitor Alert\",\"attachments\":[{\"color\":\"danger\",\"fields\":[{\"title\":\"Status\",\"value\":\"${{ steps.check_results.outputs.status_message }}\",\"short\":true},{\"title\":\"Issues Found\",\"value\":\"${{ steps.check_results.outputs.issues_count }}\",\"short\":true},{\"title\":\"Workflow\",\"value\":\"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\",\"short\":false}]}]}" \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          else
            echo "No Slack webhook configured"
          fi
