name: Enhanced Sitemap Monitor & Status Reporter

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 12 * * 1' # Weekly on Mondays at 12:00 UTC
    - cron: '0 6 * * *'  # Daily health check at 6:00 UTC
  workflow_dispatch:
    inputs:
      force_resubmit:
        description: 'Force resubmit all sitemaps'
        required: false
        default: 'false'
        type: boolean
      detailed_report:
        description: 'Generate detailed status report'
        required: false
        default: 'true'
        type: boolean

jobs:
  sitemap-status-monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    env:
      SITE_URL: "https://sednabcn.github.io/"
      SITEMAP_URLS: "https://sednabcn.github.io/sitemap.xml"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-oauthlib google-auth-httplib2
          pip install requests beautifulsoup4 lxml tabulate colorama python-dateutil pytz

      - name: Setup service account credentials
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > service-account.json
          chmod 600 service-account.json

      - name: Validate environment
        run: |
          echo "=== Environment Validation ==="
          python --version
          echo "Service account validation:"
          python -c "import json; json.load(open('service-account.json'))" && echo "✅ Service account JSON is valid" || (echo "❌ Invalid service account JSON" && exit 1)

      - name: Create enhanced sitemap monitoring script
        run: |
          cat > enhanced_sitemap_monitor.py << 'EOF'
          #!/usr/bin/env python3
          # (Paste your actual Python script here.)
          # ...
          EOF

      - name: Run Enhanced Sitemap Monitor
        id: sitemap_check
        env:
          FORCE_RESUBMIT: ${{ github.event.inputs.force_resubmit || 'false' }}
          DETAILED_REPORT: ${{ github.event.inputs.detailed_report || 'true' }}
        run: |
          FORCE_RESUBMIT_FLAG=""
          if [ "${FORCE_RESUBMIT}" = "true" ]; then
            FORCE_RESUBMIT_FLAG="--force-resubmit"
          fi
          if [ "${DETAILED_REPORT}" = "false" ]; then
            REPORT_FLAG="--no-detailed-report"
          else
            REPORT_FLAG="--detailed-report"
          fi
          python enhanced_sitemap_monitor.py \
            --site "$SITE_URL" \
            --sitemaps $SITEMAP_URLS \
            --output-json "sitemap-results.json" \
            --output-report "sitemap-report.md" \
            $FORCE_RESUBMIT_FLAG $REPORT_FLAG
        continue-on-error: true

      - name: Ensure Output Files Exist (Fallback)
        run: |
          if [ ! -f "sitemap-results.json" ]; then
            echo '{"summary":{"overall_status":"no_output","issues_found":1,"fixes_applied":0},"sitemaps":[],"issues_found":["No results file created"],"fixes_applied":[]}' > sitemap-results.json
          fi
          if [ ! -f "sitemap-report.md" ]; then
            echo "# Sitemap Monitor Failed\nNo report was generated." > sitemap-report.md
          fi

      - name: Fail if State Report Not Generated
        run: |
          if grep -q "No report was generated." sitemap-report.md; then
            echo "❌ State Report was not generated! Failing workflow."
            exit 1
          fi
          if grep -q "No results file created" sitemap-results.json; then
            echo "❌ Results file was not generated! Failing workflow."
            exit 1
          fi

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sitemap-monitor-results-${{ github.run_number }}
          path: |
            sitemap-results.json
            sitemap-report.md
          retention-days: 30

      - name: Check Results and Set Status
        id: check_results
        run: |
          ISSUES_COUNT=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['issues_found'])" 2>/dev/null || echo "1")
          FIXES_COUNT=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['fixes_applied'])" 2>/dev/null || echo "0")
          OVERALL_STATUS=$(python -c "import json; d=json.load(open('sitemap-results.json')); print(d['summary']['overall_status'])" 2>/dev/null || echo "error")
          echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
          echo "fixes_count=$FIXES_COUNT" >> $GITHUB_OUTPUT
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          if [ "$OVERALL_STATUS" = "healthy" ]; then
            echo "status_emoji=✅" >> $GITHUB_OUTPUT
            echo "status_message=All sitemaps healthy" >> $GITHUB_OUTPUT
          else
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "status_message=Issues detected - check report" >> $GITHUB_OUTPUT
          fi

      - name: Create Scripts Directory
        run: mkdir -p scripts

      - name: Create Issue Body Script
        run: |
          cat > scripts/make-issue.js << 'EOF'
          const fs = require('fs');
          let reportContent = 'Report generation failed.';
          try { reportContent = fs.readFileSync('sitemap-report.md', 'utf8'); } catch (e) {}
          const issueBody = `${reportContent}

          **Workflow Run:** [#${process.env.GITHUB_RUN_NUMBER}](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
          **Triggered by:** ${process.env.GITHUB_EVENT_NAME}
          **Issues Found:** ${process.env.ISSUES_COUNT}
          **Fixes Applied:** ${process.env.FIXES_COUNT}

          _Automatically created by the Enhanced Sitemap Monitor workflow._`;
          console.log(issueBody);
          EOF

      - name: Create Issue Body
        if: steps.check_results.outputs.overall_status != 'healthy'
        run: node scripts/make-issue.js > issue-body.txt
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          ISSUES_COUNT: ${{ steps.check_results.outputs.issues_count }}
          FIXES_COUNT: ${{ steps.check_results.outputs.fixes_count }}

      - name: Create or Update Issue on Problems
        if: steps.check_results.outputs.overall_status != 'healthy'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issueTitle = '🗺️ Sitemap Monitor: Issues Detected';
            const issueBody = fs.readFileSync('issue-body.txt', 'utf8');
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              labels: ['sitemap-monitor','automated']
            });
            const existing = issues.data.find(i => i.title === issueTitle);
            if (existing) {
              await github.rest.issues.update({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number, 
                body: issueBody 
              });
            } else {
              await github.rest.issues.create({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                title: issueTitle, 
                body: issueBody, 
                labels: ['sitemap-monitor','automated','bug'] 
              });
            }

      - name: Close Issue if All Healthy
        if: steps.check_results.outputs.overall_status == 'healthy'
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = '🗺️ Sitemap Monitor: Issues Detected';
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              labels: ['sitemap-monitor','automated']
            });
            const existing = issues.data.find(i => i.title === issueTitle);
            if (existing) {
              await github.rest.issues.createComment({
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number,
                body: `✅ All sitemap issues resolved!\n\nRun: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
              await github.rest.issues.update({ 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue_number: existing.number, 
                state: 'closed' 
              });
            }

      - name: Update Repository Status Badge
        run: |
          mkdir -p .github/badges
          STATUS_MESSAGE="${{ steps.check_results.outputs.status_message }}"
          if [ "${{ steps.check_results.outputs.overall_status }}" = "healthy" ]; then
            COLOR="brightgreen"
          else
            COLOR="red"
          fi
          cat > .github/badges/sitemap-status.json <<EOF
          {
            "schemaVersion": 1,
            "label": "sitemap status",
            "message": "$STATUS_MESSAGE",
            "color": "$COLOR",
            "namedLogo": "google",
            "logoColor": "white"
          }
          EOF

      - name: Commit Status Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/sitemap-status.json || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🗺️ Update sitemap status badge - ${{ steps.check_results.outputs.status_message }}"
            git push
          fi

      - name: Summary
        run: |
          echo "## 🗺️ Sitemap Monitor Summary" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.check_results.outputs.status_emoji }} **Status:** ${{ steps.check_results.outputs.status_message }}" >> $GITHUB_STEP_SUMMARY
          echo "- Issues Found: ${{ steps.check_results.outputs.issues_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fixes Applied: ${{ steps.check_results.outputs.fixes_count }}" >> $GITHUB_STEP_SUMMARY
          if [ -f "sitemap-report.md" ]; then
            echo "### 📋 Detailed Report" >> $GITHUB_STEP_SUMMARY
            cat sitemap-report.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack Notification (if configured)
        if: steps.check_results.outputs.overall_status != 'healthy'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"🗺️ Sitemap Monitor Alert\",\"attachments\":[{\"color\":\"danger\",\"fields\":[{\"title\":\"Status\",\"value\":\"${{ steps.check_results.outputs.status_message }}\",\"short\":true},{\"title\":\"Issues Found\",\"value\":\"${{ steps.check_results.outputs.issues_count }}\",\"short\":true},{\"title\":\"Workflow\",\"value\":\"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\",\"short\":false}]}]}" \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          else
            echo "No Slack webhook configured"
          fi
