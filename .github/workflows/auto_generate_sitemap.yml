name: Auto Generate Sitemap

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.html'
      - '**.md'
      - '**.php'
      - '**.htm'
      - 'docs/**'
      - 'content/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate sitemap even if no changes'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      base_url:
        description: 'Base URL override (optional)'
        required: false
        type: string
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'

jobs:
  generate-sitemap:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for accurate last modified dates
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Determine base URL
        id: base_url
        run: |
          # Priority order:
          # 1. Manual input
          # 2. Repository environment variable  
          # 3. Auto-detect from repository
          
          BASE_URL="${{ github.event.inputs.base_url }}"
          
          if [ -z "$BASE_URL" ]; then
            # Try environment variable
            BASE_URL="${{ vars.SITE_BASE_URL }}"
          fi
          
          if [ -z "$BASE_URL" ]; then
            # Auto-detect GitHub Pages URL
            REPO_NAME="${{ github.repository }}"
            REPO_OWNER="${{ github.repository_owner }}"
            
            # Check if it's a user/org page (repo name matches username)
            if [[ "$REPO_NAME" == "$REPO_OWNER/$REPO_OWNER.github.io" ]]; then
              BASE_URL="https://$REPO_OWNER.github.io"
            else
              # Project page
              PROJECT_NAME="${REPO_NAME#*/}"  # Remove owner/ prefix
              BASE_URL="https://$REPO_OWNER.github.io/$PROJECT_NAME"
            fi
          fi
          
          echo "Detected base URL: $BASE_URL"
          echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT
      
      - name: Create sitemap configuration
        run: |
          cat > sitemap-config.json << 'EOF'
          {
            "file_extensions": [".html", ".htm", ".php", ".asp", ".aspx", ".md", ".markdown", ".pdf"],
            "exclude_patterns": [
              ".*\\.git.*",
              ".*node_modules.*",
              ".*\\.venv.*", 
              ".*__pycache__.*",
              ".*\\.DS_Store.*",
              ".*\\.tmp.*",
              ".*404\\.html$",
              ".*error\\.html$",
              ".*\\.github.*",
              ".*README\\.md$"
            ],
            "include_patterns": [],
            "priority_rules": {
              "index": 1.0,
              "home": 1.0,
              "main": 0.9,
              "about": 0.8,
              "contact": 0.8,
              "blog": 0.7,
              "post": 0.6,
              "page": 0.5,
              "default": 0.5
            },
            "changefreq_rules": {
              "index": "daily",
              "blog": "weekly",
              "post": "weekly",
              "news": "daily",
              "static": "monthly", 
              "default": "weekly"
            },
            "auto_detect": {
              "readme_as_index": true,
              "detect_project_type": true,
              "scan_html_links": true,
              "include_markdown": true
            }
          }
          EOF
      
      - name: Create sitemap generator script
        run: |
          # The script will be created in the repository root
          # Copy the sitemap generator script here
          curl -sSL https://raw.githubusercontent.com/your-username/sitemap-generator/main/generate_sitemap.py > generate_sitemap.py
          chmod +x generate_sitemap.py
      
      - name: Generate sitemap
        run: |
          echo "üöÄ Generating sitemap for ${{ steps.base_url.outputs.base_url }}"
          
          # Run the sitemap generator
          python generate_sitemap.py \
            "${{ steps.base_url.outputs.base_url }}" \
            --config sitemap-config.json \
            --output sitemap.xml \
            --verbose
          
          # Display results
          if [ -f sitemap.xml ]; then
            echo "‚úÖ Sitemap generated successfully"
            echo "üìä Sitemap statistics:"
            echo "   Size: $(wc -c < sitemap.xml) bytes"
            echo "   URLs: $(grep -c '<loc>' sitemap.xml || echo '0')"
            echo ""
            echo "üîç First 10 URLs:"
            grep '<loc>' sitemap.xml | head -10 | sed 's/.*<loc>\(.*\)<\/loc>.*/   - \1/'
          else
            echo "‚ùå Failed to generate sitemap"
            exit 1
          fi
      
      - name: Validate sitemap
        run: |
          echo "üîç Validating sitemap.xml"
          
          # Basic XML validation
          python -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('sitemap.xml')
              root = tree.getroot()
              urls = root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}url')
              print(f'‚úÖ Valid XML with {len(urls)} URLs')
              
              # Check for issues
              if len(urls) > 50000:
                  print('‚ö†Ô∏è  Warning: Sitemap has more than 50,000 URLs')
              elif len(urls) == 0:
                  print('‚ö†Ô∏è  Warning: Sitemap contains no URLs')
              else:
                  print('‚úÖ URL count looks good')
                  
          except Exception as e:
              print(f'‚ùå XML validation failed: {e}')
              exit(1)
          "
      
      - name: Check if sitemap changed
        id: changes
        run: |
          # Check if sitemap.xml has meaningful changes
          if [ -f sitemap.xml ]; then
            if git diff --quiet sitemap.xml 2>/dev/null; then
              echo "No changes to sitemap.xml"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "Sitemap.xml has changes"
              echo "changed=true" >> $GITHUB_OUTPUT
              
              # Show the diff (excluding lastmod changes for readability)
              echo "üìù Changes detected:"
              git diff sitemap.xml | grep -E '^[+-]' | grep -v lastmod | head -20 || true
            fi
          else
            echo "New sitemap.xml created"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true' || github.event.inputs.force_regenerate == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit
          git add sitemap.xml
          git commit -m "ü§ñ Auto-update sitemap.xml
          
          - Generated $(grep -c '<loc>' sitemap.xml) URLs
          - Updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - Base URL: ${{ steps.base_url.outputs.base_url }}
          - Triggered by: ${{ github.event_name }}" || {
            echo "No changes to commit"
            exit 0
          }
          
          # Push changes
          git push
      
      - name: Upload sitemap artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sitemap-${{ github.run_number }}
          path: sitemap.xml
          retention-days: 30
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.changes.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let sitemapStats = '';
            if (fs.existsSync('sitemap.xml')) {
              const content = fs.readFileSync('sitemap.xml', 'utf8');
              const urlCount = (content.match(/<loc>/g) || []).length;
              sitemapStats = `üìä Generated sitemap with ${urlCount} URLs`;
            }
            
            const body = `## üó∫Ô∏è Sitemap Updated
            
            The sitemap has been automatically updated by this PR.
            
            ${sitemapStats}
            
            **Base URL:** ${{ steps.base_url.outputs.base_url }}
            
            You can download the generated sitemap from the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: Summary
        if: always()
        run: |
          echo "üèÅ Sitemap Generation Complete"
          echo "================================="
          
          if [ -f sitemap.xml ]; then
            URL_COUNT=$(grep -c '<loc>' sitemap.xml || echo '0')
            FILE_SIZE=$(wc -c < sitemap.xml)
            
            echo "‚úÖ Status: Success"
            echo "üìÅ File: sitemap.xml"
            echo "üìä URLs: $URL_COUNT"
            echo "üíæ Size: ${FILE_SIZE} bytes"
            echo "üåê Base URL: ${{ steps.base_url.outputs.base_url }}"
            echo "‚è∞ Generated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            
            if [ "${{ steps.changes.outputs.changed }}" == "true" ]; then
              echo "üîÑ Changes: Sitemap updated and committed"
            else
              echo "üîÑ Changes: No updates needed"
            fi
            
            # Set job summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
          # üó∫Ô∏è Sitemap Generation Results
          
          | Metric | Value |
          |--------|--------|
          | Status | ‚úÖ Success |
          | URLs Generated | $URL_COUNT |
          | File Size | ${FILE_SIZE} bytes |
          | Base URL | ${{ steps.base_url.outputs.base_url }} |
          | Changes Made | ${{ steps.changes.outputs.changed == 'true' && '‚úÖ Yes' || '‚èπÔ∏è No' }} |
          | Triggered By | ${{ github.event_name }} |
          
          ## Recent URLs (Sample)
          \`\`\`
          $(grep '<loc>' sitemap.xml | head -5 | sed 's/.*<loc>\(.*\)<\/loc>.*/\1/' || echo 'No URLs found')
          \`\`\`
          EOF
          else
            echo "‚ùå Status: Failed - sitemap.xml not found"
            echo "üîç Check previous steps for errors"
            
            # Set error summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
          # ‚ùå Sitemap Generation Failed
          
          The sitemap generation process encountered an error. Please check the workflow logs above for details.
          
          **Troubleshooting Tips:**
          - Verify the sitemap generator script is accessible
          - Check file permissions and repository structure
          - Ensure base URL is correctly configured
          - Review any validation errors in previous steps
          EOF
            
            exit 1
          fi
