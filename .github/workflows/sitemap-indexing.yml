name: Google Sitemap Indexing

on:
  # Trigger when sitemap.xml is modified in a push
  push:
    paths:
      - 'sitemap.xml'
  
  # Allow manual triggering through GitHub Actions interface
  workflow_dispatch:
  
  # Run monthly as a backup validation
  schedule:
    - cron: '0 0 1 * *'  # At midnight on the first day of each month

jobs:
  index-sitemap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests google-api-python-client google-auth-oauthlib google-auth-httplib2 tabulate
      
      - name: Check for broken links
        id: link_check
        run: |
          echo "Checking for broken links in sitemap..."
          
          # Simple Python script to check for broken links
          python - <<EOF
          import sys
          import xml.etree.ElementTree as ET
          import requests
          
          # Define namespace for sitemap
          ns = {'sitemap': 'http://www.sitemaps.org/schemas/sitemap/0.9'}
          
          try:
              # Parse sitemap
              tree = ET.parse('sitemap.xml')
              root = tree.getroot()
              
              # Find all URLs in sitemap
              broken_links = []
              for url in root.findall('.//sitemap:loc', ns):
                  link = url.text
                  try:
                      response = requests.head(link, timeout=10)
                      if response.status_code >= 400:
                          print(f"Broken link found: {link} (Status: {response.status_code})")
                          broken_links.append(f"{link} (Status: {response.status_code})")
                  except Exception as e:
                      print(f"Error checking {link}: {str(e)}")
                      broken_links.append(f"{link} (Error: {str(e)})")
              
              # Report results
              if broken_links:
                  with open('broken_links.txt', 'w') as f:
                      for link in broken_links:
                          f.write(f"{link}\n")
                  print(f"Found {len(broken_links)} broken links")
                  print("::set-output name=broken_links::true")
                  sys.exit(1)
              else:
                  print("No broken links found")
                  print("::set-output name=broken_links::false")
                  sys.exit(0)
                  
          except Exception as e:
              print(f"Error checking sitemap: {str(e)}")
              print("::set-output name=broken_links::error")
              sys.exit(2)
          EOF
        continue-on-error: true
      
      - name: Send notification on broken links
        if: steps.link_check.outputs.broken_links == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const brokenLinks = fs.readFileSync('broken_links.txt', 'utf8');
            
            const issueTitle = 'üö® Broken links detected in sitemap';
            const issueBody = `## Broken Links Report
            
            The sitemap indexing workflow has detected broken links in your sitemap.xml file.
            
            ### Details
            ${brokenLinks}
            
            Please fix these links before they are submitted to Google Search Console.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['bug', 'sitemap']
            });
      
      - name: Write Google credentials to file
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          if [ -n "$GOOGLE_CREDENTIALS" ]; then
            echo "$GOOGLE_CREDENTIALS" > client_secret.json
            echo "Google credentials written to file"
          else
            echo "::error ::GOOGLE_CREDENTIALS secret is not set"
            exit 1
          fi
      
      - name: Check sitemap and request indexing
        id: indexing
        run: |
          # Check if scripts exist
          if [ ! -f ".github/scripts/sitemap_check_and_submit.py" ]; then
            echo "::error ::sitemap_check_and_submit.py script not found!"
            echo "::set-output name=status::missing_script"
            exit 1
          fi
          
          if [ ! -f ".github/scripts/submit_status_sitemap.py" ]; then
            echo "::error ::submit_status_sitemap.py script not found!"
            echo "::set-output name=status::missing_script"
            exit 1
          fi
          
          # Run the script
          python .github/scripts/sitemap_check_and_submit.py --site "YOUR_DOMAIN_HERE" --sitemap sitemap.xml
          
          INDEXING_STATUS=$?
          if [ $INDEXING_STATUS -eq 0 ]; then
            echo "::set-output name=status::success"
          else
            echo "::set-output name=status::failed"
            exit 1
          fi
      
      - name: Send notification on success
        if: steps.indexing.outputs.status == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚úÖ Sitemap indexing completed',
              body: 'Sitemap has been successfully submitted to Google Search Console for indexing.',
              labels: ['info', 'sitemap']
            });
      
      - name: Send notification on failure
        if: steps.indexing.outputs.status == 'missing_script' || steps.indexing.outputs.status == 'failed'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ steps.indexing.outputs.status }}';
            let title, body;
            
            if (status === 'missing_script') {
              title = '‚ùå Sitemap indexing failed - Missing script';
              body = 'One or more required Python scripts were not found in the repository. Please check that the scripts exist in the .github/scripts/ directory.';
            } else {
              title = '‚ùå Sitemap indexing failed';
              body = 'The sitemap indexing process has failed. Please check the workflow logs for more details.';
            }
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'sitemap']
            });